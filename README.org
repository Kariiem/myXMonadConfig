#+title: XMonad Config
#+author: Karim
#+property: header-args :tangle src/xmonad.hs

* Table of contents :toc:
- [[#imports][Imports]]
- [[#variables][Variables]]
- [[#workspaces][Workspaces]]
- [[#scratchpads][Scratchpads]]
- [[#log-hook][Log Hook]]
  - [[#status-bar][Status bar]]
- [[#startup-hook][Startup Hook]]
- [[#event-hook][Event Hook]]
- [[#manage-hook][Manage Hook]]
- [[#layout-hook][Layout Hook]]
- [[#keybindings][Keybindings]]
- [[#main][Main]]

* Imports
#+begin_src haskell

  -- Builtin
import Data.Map qualified as M
import Data.Monoid
import System.Exit

  -- Basic
import XMonad
import XMonad.StackSet qualified as W

  -- Layouts
import XMonad.Layout.MultiToggle
import XMonad.Layout.MultiToggle.Instances
import XMonad.Layout.ResizableThreeColumns
import XMonad.Layout.Spacing
import XMonad.Layout.Decoration
import XMonad.Layout.SimplestFloat
import XMonad.Layout.Grid
import XMonad.Layout.MultiToggle
import XMonad.Layout.MultiToggle.Instances
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.ResizableTile
import XMonad.Layout.WindowArranger
import XMonad.Layout.BorderResize
import XMonad.Layout.PositionStoreFloat

  -- Actions
import XMonad.Actions.SpawnOn
import XMonad.Actions.MouseResize
import XMonad.Actions.CopyWindow
import XMonad.Actions.CycleWS

  -- Hooks
import XMonad.Hooks.InsertPosition
import XMonad.Hooks.Place
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.StatusBar
import XMonad.Hooks.FadeWindows
import XMonad.Hooks.WorkspaceHistory
import XMonad.Hooks.WindowSwallowing
import XMonad.Hooks.SetWMName
import XMonad.Hooks.StatusBar
import XMonad.Hooks.StatusBar.PP
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.EwmhDesktops
  -- Utils
import XMonad.Util.EZConfig
import XMonad.Util.NamedActions
import XMonad.Util.NamedScratchpad
import XMonad.Util.Hacks qualified as Hacks
import XMonad.Util.ClickableWorkspaces
import XMonad.Util.SpawnOnce

  -- MyLib
import Color.Theme
#+end_src


* Variables
#+begin_src haskell
myTerminal ::String
myTerminal = "alacritty"

-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

-- Whether clicking on a window to focus also passes the click to the window
myClickJustFocuses :: Bool
myClickJustFocuses = False

myModMask :: KeyMask
myModMask = mod4Mask

myNormalBorderColor :: String
myNormalBorderColor = "#5599cc"

myFocusedBorderColor :: String
myFocusedBorderColor = "#55ff99"

myBorderWidth :: Dimension
myBorderWidth = 2

defaultGapSize :: Integer
defaultGapSize = 10

fileManager :: String
fileManager = "thunar"

browser :: String
browser = "microsoft-edge-dev"

fileBrowser :: String
fileBrowser = "thunar"

pdfHistory :: String
pdfHistory = "~/script/pdf_history"

powerOpts :: String
powerOpts = "~/script/powerOptions"

doom_emacsclient :: String
doom_emacsclient = "~/script/run_emacs doom doom-emacs"

vanilla_emacsclient :: String
vanilla_emacsclient = "~/script/run_emacs vanilla vanilla-emacs"

dmenu_run :: String
dmenu_run = "~/Suckless/bin/dmenu_run_history"

taskManager :: String
taskManager = "btm"

changeThemeScript = "$XDG_CONFIG_HOME/xmonad/scripts/select-theme"


#+end_src

* Workspaces
Workspaces are the tags that appear in the status bar, each tag corresponds to virtual workspace.
#+begin_src haskell
myWorkspaces :: [String]
myWorkspaces = ["home","fecu","www","docs","dev","sys-mon"] --map show [1..9::Int]

#+end_src


* Scratchpads
#+begin_src haskell
scratchpads =
  [ -- run htop in xterm, find it by title, use default floating window placement
    NS "notes" "st -e nvim" (title =? "notes") defaultFloating,
    NS
      "stardict"
      "stardict"
      (className =? "Stardict")
      (customFloating $ W.RationalRect (1 / 6) (1 / 6) (2 / 3) (2 / 3))
  ]

#+end_src


* Log Hook
#+begin_src haskell

myLogHook :: X ()
myLogHook =
  workspaceHistoryHook

myFadeHook :: FadeHook
myFadeHook = composeAll []

#+end_src

** Status bar
This section defines a pretty printer (PP) for the status bar.

#+begin_src haskell
myPP :: PP
myPP =
  def
    { ppCurrent = xmobarColor (colorRed theme) "",
      ppUrgent = xmobarColor (colorGreen theme) (colorBPurple theme),
      ppLayout = xmobarFont 5 . xmobarColor (colorBPurple theme) "" ,
      ppSep = " ",
      ppWsSep = " ",
      ppExtras = [windowCount],
      ppTitle = xmobarColor (colorFore theme) "" . shorten 45,
      ppHidden = xmobarColor (colorCyan theme) "",
      ppHiddenNoWindows = xmobarColor (colorGrey theme) "",
      ppOrder = \(ws : l : t : ex) -> ws : ex ++ l : [t]
    }

windowCount :: X (Maybe String)
windowCount =
  Just
    . xmobarColor (colorGreen theme) ""
    . show
    . length
    . W.integrate'
    . W.stack
    . W.workspace
    . W.current
    . windowset
    <$> get

mySB :: StatusBarConfig
mySB =
  statusBarProp "xmobar" $
    copiesPP (xmobarFont 4 . xmobarColor (colorBlack theme) "") myPP >>= clickablePP

#+end_src


* Startup Hook
Startup hook
Perform an arbitrary action each time xmonad starts or is restarted
with mod-q.
`spawnOnce` is called only the first time xmonad is started
`spawn` is called every time xmonad is started
#+begin_src haskell

myStartupHook :: X ()
myStartupHook = do
  setWMName "LG3D"
  spawnOnce "sxhkd"
  spawnOnce "emacs --with-profile doom-emacs --daemon &"
  spawnOnce "emacs --with-profile vanilla-emacs --daemon &"

  spawnOnOnce "sys-mon" ("st -e btm")
  spawn "killall trayer"
  spawnOnce "nm-applet"
  spawnOnce "picom"

  spawn $
     "sleep 2 && trayer --edge top --align right --distance 10 --distancefrom right --distance 5 --distancefrom top \
      \--widthtype request --padding 6 --SetDockType true --SetPartialStrut false --expand true --transparent true --alpha 0 \
      \--tint "
        ++ trayerColor
        ++ " --height 30"


trayerColor = "0x" ++ tail (colorBack theme)

-- spawnOnOnce "2" browser
-- spawn "pcmanfm --desktop &"

#+end_src


* Event Hook
Defines a custom handler function for X Events. The function should
return (All True) if the default handler is to be run afterwards.

#+begin_src haskell
myEventHook :: Event -> X All
myEventHook =
  composeAll
    [ Hacks.windowedFullscreenFixEventHook,
      swallowEventHook (className =? "Alacritty" <||> className =? "Termite") (return True)
    ]
#+end_src


* Manage Hook
Execute arbitrary actions and WindowSet manipulations when managing
a new window. You can use this to, for example, always float a
particular program, or have a client always appear on a particular
workspace.

To find the property name associated with a program, use
> xprop | grep WM_CLASS
and click on the client you're interested in.

To match on the WM_NAME, you can use 'title' in the same way that
'className' and 'resource' are used below.

#+begin_src haskell
myManageHook :: Query (Endo WindowSet)
myManageHook =
  composeAll
    [ manageSpawn,
      insertPosition Below Newer,
      placeHook $ withGaps (16, 16, 16, 16) (smart (0.5, 0.5)), -- simpleSmart -- (smart (0.5,0.5))
      namedScratchpadManageHook scratchpads,
      className =? "jetbrains-idea-ce" --> doFloat,
      className =? "dialog" --> doFloat,
      className =? "download" --> doFloat,
      className =? "notification" --> doFloat,
      className =? "Xmessage" --> doFloat
    ]

#+end_src


* Layout Hook
The following layouts are supported
|----------------+--------------------+------------------------------------------------------------------+-----------|
| layout         | name in status bar | description                                                      | resizable |
|----------------+--------------------+------------------------------------------------------------------+-----------|
| resizableTiled | tall               | default layout, the screen is divided into master and stack.     | yes       |
| threeColMid    | three col mid      | divide the screen into three cols, the middle one is the master. | yes       |
| threeCol       | three col          | divide the screen into three cols, the leftmost is the master.   | yes       |
| grid           | grid               | divide the screen into equally sized rectangles.                 | no        |
| full           | monocle            | single window spanning the whole screen.                         | -         |
| myFloat        | flaot              | floating window layout, resizable using mouse or keyboard.       | yes       |
|----------------+--------------------+------------------------------------------------------------------+-----------|

#+begin_src haskell
mySpacing :: Integer -> Integer -> l a -> ModifiedLayout Spacing l a
mySpacing i j = spacingRaw False (Border i i i i) True (Border j j j j) True

resizableTiled = renamed [Replace "tall"]
               $ mySpacing defaultGapSize defaultGapSize
               $ ResizableTall 1 (3 / 100) (1 / 2) []

threeColMid = renamed [Replace "threeColMid"]
            $ mySpacing defaultGapSize defaultGapSize
            $ ResizableThreeColMid 1 (3 / 100) (1 / 2) []

threeCol = renamed [Replace "threeCol"]
            $ mySpacing defaultGapSize defaultGapSize
            $ ResizableThreeCol 1 (3 / 100) (1 / 2) []

grid = renamed [Replace "grid"] $ mySpacing defaultGapSize defaultGapSize Grid

full = renamed [Replace "monocle"] $ mySpacing defaultGapSize defaultGapSize Full

myFloat = renamed [Replace "float"]
        . mouseResize
        . borderResize
        . windowArrangeAll
        $ simplestFloat

myLayout = avoidStruts
         . smartBorders
         . mkToggle (NOBORDERS ?? FULL ?? EOT)
         . mkToggle (single MIRROR) $ lll -- . avoidStruts lll
  where
    lll =
            resizableTiled
        ||| threeCol
        ||| threeColMid
        ||| grid
        ||| full
        ||| myFloat

data OnlyTiled = OnlyTiled
  deriving (Read, Show)

instance SetsAmbiguous OnlyTiled where
  hiddens _ _ _ mst wrs = filter (`elem` W.integrate' mst) $ map fst wrs

#+end_src


* Keybindings
#+begin_src haskell

myKeys conf =
    subTitle "XMonad Controls"
    [ ("M-q"          , addName "Restart XMonad"                $ sbCleanupHook mySB >> spawn "xmonad --restart")
    , ("M-r"          , addName "Recompile XMonad"              $ spawn "xmonad --recompile")
    , ("M-S-c"        , addName "Kill the focused application"  $ kill1)
    , ("M-S-q"        , addName "Exit XMonad"                   $ io exitSuccess)
    , ("M-S-r"        , addName "Refresh XMonad"                $ refresh)
    , ("M-S-t"        , addName "Change color theme"            $ spawn changeThemeScript)
    , ("M-S-b"        , addName "Show/Hide status bar"          $ sendMessage ToggleStruts)
    ]
    ++
    subTitle "Dmenu Scripts"
    [ ("M-x"          , addName "Poweroff prompt "              $ spawn powerOpts)
    , ("M-p"          , addName "Dmenu app launcher"            $ spawn dmenu_run)
    , ("M-o"          , addName "Navigate your pdf history"     $ spawn pdfHistory)
    ]
    ++
    subTitle "Applications"
    [ ("M-S-<Return>" , addName ("Open a new terminal ("++myTerminal++")") $ spawn (terminal conf))
    , ("M-d"          , addName "Launch Doom Emacs"                        $ spawn doom_emacsclient)
    , ("M-v"          , addName "Launch vanilla Emacs"                     $ spawn vanilla_emacsclient)
    ]
    ++
    subTitle "Layout Controls"
    [ ("M-S-<Tab>"    , addName "Reset the window layout"             $ setLayout $ layoutHook conf)
    , ("M-<Tab>"      , addName "Next layout"                         $ sendMessage NextLayout)
    , ("M-S-m"        , addName "Rotate layout by 90 degrees"         $ sendMessage $ Toggle MIRROR)
    , ("M-t s"        , addName "Toggle gaps"                         $ toggleSpaces)
    , ("M-t b"        , addName "Toggle borders"                      $ sendMessage $ Toggle NOBORDERS)
    , ("M-t t"        , addName "Tile a floating window"              $ withFocused $ windows . W.sink)
    , ("M-,"          , addName "Increase windows in the master pane" $ sendMessage (IncMasterN 1))
    , ("M-."          , addName "Decrease windows in the master pane" $ sendMessage (IncMasterN (-1)))
    , ("M-S-n"        , addName "Open a scratchpad"                   $ namedScratchpadAction scratchpads "notes")
    ]
    ++
    subTitle "Window/Workspace Controls"
    [ ("M-C-a"        , addName "Copy the focused window to all workspaces" $ windows copyToAll)
    , ("M-S-a"        , addName "Kill all copies of the focused window"     $ killAllOtherCopies)
    , ("M-j"          , addName "Focus the next window"                     $ windows W.focusDown)
    , ("M-k"          , addName "Focus the previous window"                 $ windows W.focusUp)
    , ("M-<Return>"   , addName "Swap the focused window with the master window"   $ windows W.swapMaster)
    , ("M-S-j"        , addName "Swap the focused window with the next window"     $ windows W.swapDown)
    , ("M-S-k"        , addName "Swap the focused window with the previous window" $ windows W.swapUp)
    , ("M-h"          , addName "Shrink window"       $ sendMessage Shrink)
    , ("M-l"          , addName "Expand window"       $ sendMessage Expand)
    , ("M-S-l"        , addName "MirrorShrink window" $ sendMessage MirrorShrink)
    , ("M-S-h"        , addName "MirrorExpand window" $ sendMessage MirrorExpand)
    , ("M-S-<Right>"  , addName "Shift window to next workspace"             $ shiftToNext)
    , ("M-S-<Left>"   , addName "Shift window to prev workspace"             $ shiftToPrev)
    , ("M-C-<Right>"  , addName "Shift window to next workspace, then goto"  $ shiftToNext >> nextWS)
    , ("M-C-<Left>"   , addName "Shift window to prev workspace, then goto"  $ shiftToPrev >> prevWS)
    ]
    ++
    subTitle "Floating Layouts Controls"
    [ ("M-M1-<Left>"  , addName "Move window left by 10 pixels"      $ sendMessage (MoveLeft 10))
    , ("M-M1-<Right>" , addName "Move window right by 10 pixels"     $ sendMessage (MoveRight 10))
    , ("M-M1-<Down>"  , addName "Move window down by 10 pixels"      $ sendMessage (MoveDown 10))
    , ("M-M1-<Up>"    , addName "Move window up by 10 pixels"        $ sendMessage (MoveUp 10))
    , ("M1-C-<Left>"  , addName "Expand the left edge by 5 pixels"   $ sendMessage (IncreaseLeft 5))
    , ("M1-C-<Right>" , addName "Expand the right edge by 5 pixels"  $ sendMessage (IncreaseRight 5))
    , ("M1-C-<Down>"  , addName "Expand the bottom edge by 5 pixels" $ sendMessage (IncreaseDown 5))
    , ("M1-C-<Up>"    , addName "Expand the top edge by 5 pixels"    $ sendMessage (IncreaseUp 5))
    , ("M1-S-<Left>"  , addName "Shrink the left edge by 5 pixels"   $ sendMessage (DecreaseLeft 5))
    , ("M1-S-<Right>" , addName "Shrink the right edge by 5 pixels"  $ sendMessage (DecreaseRight 5))
    , ("M1-S-<Down>"  , addName "Shrink the bottom edge by 5 pixels" $ sendMessage (DecreaseDown 5))
    , ("M1-S-<Up>"    , addName "Shrink the top edge by 5 pixels"    $ sendMessage (DecreaseUp 5))
    ]
    ++
    subTitle "Workspace Controls"
    [ ("M-<Right>"    , addName "Goto next workspace"                $ nextWS)
    , ("M-<Left>"     , addName "Goto previous workspace"            $ prevWS)
    , ("M-1"          , addName ("Goto workspace 1")                 $ windows $ W.greedyView $ ws !! 0)
    , ("M-2"          , addName ("Goto workspace 2")                 $ windows $ W.greedyView $ ws !! 1)
    , ("M-3"          , addName ("Goto workspace 3")                 $ windows $ W.greedyView $ ws !! 2)
    , ("M-4"          , addName ("Goto workspace 4")                 $ windows $ W.greedyView $ ws !! 3)
    , ("M-5"          , addName ("Goto workspace 5")                 $ windows $ W.greedyView $ ws !! 4)
    , ("M-6"          , addName ("Goto workspace 6")                 $ windows $ W.greedyView $ ws !! 5)
    , ("M-S-1"        , addName ("Shift window to workspace 1")      $ windows $ W.shift $ ws !! 0)
    , ("M-S-2"        , addName ("Shift window to workspace 2")      $ windows $ W.shift $ ws !! 1)
    , ("M-S-3"        , addName ("Shift window to workspace 3")      $ windows $ W.shift $ ws !! 2)
    , ("M-S-4"        , addName ("Shift window to workspace 4")      $ windows $ W.shift $ ws !! 3)
    , ("M-S-5"        , addName ("Shift window to workspace 5")      $ windows $ W.shift $ ws !! 4)
    , ("M-S-6"        , addName ("Shift window to workspace 6")      $ windows $ W.shift $ ws !! 5)
    , ("M-C-1"        , addName ("Copy window to workspace 1")       $ windows $ copy $ ws !! 0)
    , ("M-C-2"        , addName ("Copy window to workspace 2")       $ windows $ copy $ ws !! 1)
    , ("M-C-3"        , addName ("Copy window to workspace 3")       $ windows $ copy $ ws !! 2)
    , ("M-C-4"        , addName ("Copy window to workspace 4")       $ windows $ copy $ ws !! 3)
    , ("M-C-5"        , addName ("Copy window to workspace 5")       $ windows $ copy $ ws !! 4)
    , ("M-C-6"        , addName ("Copy window to workspace 6")       $ windows $ copy $ ws !! 5)
    ]
    ++
    subTitle "Gap Controls"
    [ ("M-s i"        , addName "Increase gap size by 5 pixels"      $ incScreenWindowSpacing 5)
    , ("M-s d"        , addName "decrease gap size by 5 pixels"      $ decScreenWindowSpacing 5)
    , ("M-s r"        , addName "Reset gap size to `defaultGapSize`" $ setScreenWindowSpacing 10)
    ]

      where
        ws = workspaces conf
        subTitle str keys = (subtitle str) : mkNamedKeymap conf keys



toggleSpaces :: X ()
toggleSpaces = toggleScreenSpacingEnabled >> toggleWindowSpacingEnabled

myMouseBindings :: XConfig l -> M.Map (KeyMask, Button) (Window -> X ())
myMouseBindings XConfig {XMonad.modMask = modm} =
  M.fromList
    [ ((modm, button1)                 , \w -> focus w >> mouseMoveWindow w >> windows W.shiftMaster )
    , ((modm .|. controlMask, button1) , \w -> focus w >> windows W.shiftMaster)
    , ((modm .|. shiftMask, button1)   , \w -> focus w >> mouseResizeWindow w >> windows W.shiftMaster)
    ]
#+end_src


* Main
A structure containing your configuration settings, overriding fields in the default config. Any you don't override, will use the defaults defined in xmonad/XMonad/Config.hs

#+begin_src haskell

main :: IO ()
main = xmonad
     . withSB mySB
     . docks
     . ewmhFullscreen
     . ewmh
     $ addDescrKeys' ((mod4Mask, xK_F1), xMessage) myKeys  defaults
defaults = def
  { terminal = myTerminal
  , focusFollowsMouse = myFocusFollowsMouse
  , clickJustFocuses = myClickJustFocuses
  , borderWidth = myBorderWidth
  , modMask = myModMask
  , workspaces =  myWorkspaces
  , normalBorderColor = myNormalBorderColor
  , focusedBorderColor = myFocusedBorderColor
  -- , keys = myKeys
  , mouseBindings = myMouseBindings
  , layoutHook = myLayout
  , manageHook = myManageHook
  , handleEventHook = myEventHook
  , logHook = myLogHook
  , startupHook = myStartupHook
  }

#+end_src
